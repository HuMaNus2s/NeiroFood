import os
import telebot
from telebot import types
import json
import time
import sys
from datetime import datetime, timedelta
import logging
import pytz

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
file_for_config = open('config.json', 'r')
config = json.load(file_for_config)
prefix = config['prefix']
def command_name(number):
    return prefix + commands[number]

if not os.path.exists('logs'):
    os.makedirs('logs')

moscow_tz = pytz.timezone('Europe/Moscow')
now = datetime.now(tz=moscow_tz)
current_time = now.strftime(f"%Y-%m-%d %H:%M:%S")
log_time = now.strftime("%Y-%m-%d_%H.%M")

logger = logging.getLogger('telegram')
logger_err = logging.getLogger('err')
log_file = "logs/NeiroFoodBot_{}.log".format(log_time)
logging.basicConfig(level=logging.INFO,
                    format='[%(asctime)s][%(name)s][%(levelname)s] - %(message)s',
                    filename=log_file, # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
                    filemode='w')

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(config['token'])

def printt(info):
    now = datetime.now(tz=moscow_tz)
    current_time = now.strftime(f"%Y-%m-%d %H:%M:%S")
    print(f"[{current_time}] - {info}")

def on_ready():
    printt(f"BOT ACTIVATED!")
    logger.info('BOT ACTIVATED!')

def log(message=None, error=False, button=None):
    if not error and not button: # –õ–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        printt(f'{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É <{message.text}>')
        logger.info(f'{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É <{message.text}>')
    elif not error and button: # –õ–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        printt(f'{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É <{button}>')
        logger.info(f'{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É <{button}>')
    else: # –õ–æ–≥ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        printt(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ <{message.text}>')
        logger.info(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ <{message.text}>')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
def create_back_button():
    keyboard = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
    keyboard.row(button_back)
    return keyboard
def create_menu_back_button():
    keyboard = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_menu')
    keyboard.row(button_back)
    return keyboard
def create_menu_tool_button():
    keyboard = types.InlineKeyboardMarkup()
    button_about = types.InlineKeyboardButton("–û –Ω–∞—Å", callback_data='about')
    button_FAQ = types.InlineKeyboardButton("FAQ", callback_data='FAQ')
    button_menu = types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data='menu')
    keyboard.row(button_about, button_FAQ)
    keyboard.row(button_menu)
    return keyboard
def create_menu_button():
    keyboard = types.InlineKeyboardMarkup()
    button_neiro_burger = types.InlineKeyboardButton("–ù–µ–π—Ä–æ-–±—É—Ä–≥–µ—Ä—ã", callback_data='neiro_burger')
    button_drinks = types.InlineKeyboardButton("–ù–∞–ø–∏—Ç–∫–∏", callback_data='drinks')
    button_combo = types.InlineKeyboardButton("–ù–µ–π—Ä–æ-–∫–æ–º–±–æ", callback_data='combo')
    button_back_menu = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
    keyboard.row(button_neiro_burger)
    keyboard.row(button_drinks)
    keyboard.row(button_combo)
    keyboard.row(button_back_menu)
    return keyboard
def create_menu_neiro_burger():
    keyboard = types.InlineKeyboardMarkup()
    button_angus_shef = types.InlineKeyboardButton("–ê–Ω–≥—É—Å –®–ï–§", callback_data='angus_shef')
    button_double_vopper = types.InlineKeyboardButton("–î–≤–æ–π–Ω–æ–π –í–û–ü–ü–ï–†", callback_data='double_vopper')
    button_rodeo_burger = types.InlineKeyboardButton("–†–æ–¥–µ–æ –ë—É—Ä–≥–µ—Ä", callback_data='rodeo_burger')
    button_cesar_king = types.InlineKeyboardButton("–¶–µ–∑–∞—Ä—å –ö–ò–ù–ì", callback_data='cesar_king')
    button_censi = types.InlineKeyboardButton("–¶–≠–ù–°–ò", callback_data='censi')
    button_bavarskii_burger = types.InlineKeyboardButton("–ë–∞–≤–∞—Ä—Å–∫–∏–π –±—É—Ä–≥–µ—Ä", callback_data='bavarskii_burger')
    button_black_mamba = types.InlineKeyboardButton("–ß–µ—Ä–Ω–∞—è –ú–ê–ú–ë–ê", callback_data='black_mamba')
    button_green_fresh = types.InlineKeyboardButton("–ó–µ–ª–µ–Ω–Ω—ã–π –§–†–ï–®", callback_data='green_fresh')
    button_double_cheeseburger = types.InlineKeyboardButton("–î–≤–æ–π–Ω–æ–π –ß–∏–∑–±—É—Ä–≥–µ—Ä", callback_data='double_cheeseburger')
    button_back_menu = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
    keyboard.row(button_angus_shef)
    keyboard.row(button_double_vopper)
    keyboard.row(button_rodeo_burger)
    keyboard.row(button_cesar_king)
    keyboard.row(button_censi)
    keyboard.row(button_bavarskii_burger)
    keyboard.row(button_black_mamba)
    keyboard.row(button_green_fresh)
    keyboard.row(button_double_cheeseburger)
    keyboard.row(button_back_menu)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        photo_path = 'img/LogoNeiroFood.jpg'
        bot.send_photo(message.chat.id, photo=open(photo_path, 'rb'), caption='–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NeiroFood!', reply_markup=create_menu_tool_button())
        log(message)
    except Exception as e:
        printt(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        logger.info(f'{e}')

@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.reply_to(message, f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n{command_name(0)} - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n{command_name(1)} - —Å–ø—Ä–∞–≤–∫–∞")
    log(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'about':
        text = '''
*–ü—Ä–æ–µ–∫—Ç NeiroFood üçî*

–ü—Ä–∏–≤–µ—Ç! –ú—ã - —Å—Ç—É–¥–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç *NeiroFood* –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –≠—Ç–æ –±—É—Ä–≥–µ—Ä–Ω–∞—è, –≥–¥–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±—É—Ä–≥–µ—Ä–æ–≤. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å! üçî‚ú®'''
        photo_path = 'img/AboutNeiroFood.jpg'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_back_button())
        log(call, False, call.data)
    elif call.data == 'FAQ':
        text = '''*1. –ß—Ç–æ —Ç–∞–∫–æ–µ "NeiroFood"?*
*NeiroFood* - —ç—Ç–æ –±—É—Ä–≥–µ—Ä–Ω–∞—è üçî, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±—É—Ä–≥–µ—Ä–æ–≤.

*2. –ö–∞–∫ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?*
–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±—É—Ä–≥–µ—Ä –∏–∑ –º–µ–Ω—é –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ú—ã –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.

*3. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?*
–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –º—ã –µ—â–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–æ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

*4. –ö–∞–∫ —è –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º?*
–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–∞–∫ –∂–µ —É –Ω–∞—Å –∏–º–µ–µ—Ç—Å—è —Å–∞–π—Ç.'''
        photo_path = 'img/FAQNeiroFood.jpg'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_back_button())
        log(call, False, call.data)
    elif call.data == 'menu':
        text = '''*–ú–µ–Ω—é*'''
        photo_path = 'img/NeiroMenu.jpg'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_button())
        log(call, False, call.data)
    elif call.data == 'neiro_burger':
        text = '''–ù–µ–π—Ä–æ-–±—É—Ä–≥–µ—Ä—ã'''
        photo_path = 'img/NeiroBurger.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_neiro_burger())
        log(call, False, call.data)
    elif call.data == 'drinks':
        text = '''–ù–∞–ø–∏—Ç–∫–∏'''
        photo_path = 'img/NeiroDrinks.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'combo':
        text = '''–ù–µ–π—Ä–æ-–∫–æ–º–±–æ'''
        photo_path = 'img/NeiroCombo.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)

    elif call.data == 'angus_shef':
        text = '''–ê–Ω–≥—É—Å –®–ï–§'''
        photo_path = 'img/shef.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_neiro_burger())
        log(call, False, call.data)
    elif call.data == 'double_vopper':
        text = '''–î–≤–æ–π–Ω–æ–π –í–û–ü–ü–ï–†'''
        photo_path = 'img/vopper.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'rodeo_burger':
        text = '''–†–æ–¥–µ–æ –ë—É—Ä–≥–µ—Ä'''
        photo_path = 'img/rodeo.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'cesar_king':
        text = '''–¶–µ–∑–∞—Ä—å –ö–ò–ù–ì'''
        photo_path = 'img/cesar.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'censi':
        text = '''–¶–≠–ù–°–ò'''
        photo_path = 'img/censi.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'bavarskii_burger':
        text = '''–ë–∞–≤–∞—Ä—Å–∫–∏–π –±—É—Ä–≥–µ—Ä'''
        photo_path = 'img/bavarskii.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'black_mamba':
        text = '''–ß–µ—Ä–Ω–∞—è –ú–ê–ú–ë–ê'''
        photo_path = 'img/mamba.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'green_fresh':
        text = '''–ó–µ–ª–µ–Ω–Ω—ã–π –§–†–ï–®'''
        photo_path = 'img/fresh.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)
    elif call.data == 'double_cheeseburger':
        text = '''–î–≤–æ–π–Ω–æ–π –ß–∏–∑–±—É—Ä–≥–µ—Ä'''
        photo_path = 'img/cheeseburger.png'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_back_button())
        log(call, False, call.data)


    elif call.data == 'back_menu':
        text = '''*–ú–µ–Ω—é*'''
        photo_path = 'img/NeiroMenu.jpg'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_button())
        log(call, False, call.data)
    elif call.data == 'back':
        text = '''–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NeiroFood!'''
        photo_path = 'img/LogoNeiroFood.jpg'
        media = types.InputMediaPhoto(open(photo_path, "rb"), caption=text, parse_mode="Markdown")
        bot.edit_message_media(media , call.message.chat.id, call.message.id, reply_markup=create_menu_tool_button())
        log(call, False, call.data)



if __name__ == '__main__':
    try:
        on_ready()
        bot.polling()
    except Exception as e:
        printt(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
